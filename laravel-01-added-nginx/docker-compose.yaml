version: "3.8"
services:
  # server, mid tier code/api
  server:
    container_name: "server-cont"
    build:
      context: .
      dockerfile: ./docker-files/Dockerfile-nginx
    ports:
      - "8080:80"
    # volumes:
    #   # bind mount our custom nginx.conf - inside it we are able to use
    #   # service dns names rather than IP's because compose services all get
    #   # added to the same auto-generated docker network
    #   - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    #   - ./src:/var/www/html
    depends_on:
      - php
      - mysql
  # php itself with laravel
  php:
    container_name: "php-cont"
    build:
      # specify the directory to find the dockerfile we want to build
      # this is a gotcha - the dockerfile for php is located in /docker-files
      # inside the dockerfile itself, its trying to copy the /src directory, this
      # will fail, because the context of the dockerfile itself is trying to copy src
      # from /docker-files/src, which doesn't exist because /src is located at the same
      # level as this compose file. If you try changing the dockerfile to COPY ../src,
      # it wont build as it says you cannot leave the context of the the level where the dockerfile is
      # So you need to set context to the same level as /src, which is here, and put a relative path
      # to the dockerfile from here, i.e. ./docker-files/Dockerfile-php
      context: .
      dockerfile: ./docker-files/Dockerfile-php
    volumes:
      # remember that since this is a bind mount, we don't need to define this in
      # global volumes attribute - only named volumes need to be defined there
      - ./src:/var/www/html:delegated # delegated means laravel will be writing,
      #but not in realtime, it will write in batches
  # mysql
  mysql:
    container_name: "mysql-cont"
    image: "mysql:5.7"
    env_file:
      - ./env/mysql.env
  # utility container for compose package manager
  composer-pkg:
    container_name: "composer-pkg-cont"
    build:
      context: ./docker-files
      dockerfile: Dockerfile-composer-pkg
    volumes:
      - ./src:/var/www/html
  # utility container for running npm commands - hence
  # the entrypoint ["npm"] - example docker-compose run --rm npm-cont install
  # (would run an npm install)    
  npm:
    image: node:14
    working_dir: /var/www/html
    entrypoint: ["npm"]
    volumes:
      - ./src:/var/www/html
  # utility container for php artisan, sort of like the npm of php, its
  # a package manager  
  artisan:
    build:
      context: .
      dockerfile: ./docker-files/Dockerfile-php
    volumes:
      - ./src:/var/www/html
    entrypoint: ["php", "/var/www/html/artisan"]  
